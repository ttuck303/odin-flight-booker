class Airport
	id
	city
	abbreviation


class Flight
	id
	departure date
	departure time
	arrival date
	arrival time
	origin (airport)
	destination (airport)
	airline
	vacant_seats

	belongs_to (or is it has_one ? ) :origin, class_name: "Airport", foreign_key: airport_id
	belongs_to (or is it has_one ? ) :destination, class_name: "Airport", foreign_key: airport_id
	belongs_to :airline
	has_many :passengers

class Airline
	id
	name

	has_many :flights

class Passenger
	id
	first name
	last name
	email
	birthdate
	phone

	has_many :billing_informations
	has_many :flights (this is if we remember the passenger)

class BillingInformation
	id
	name
	card type
	card number
	card security code
	street number
	street name
	city
	state
	zip


Questions:

How to structure flight - airport relationship?
	- a flight has two airports, origin and destination, so probably either has_one or belongs to
	- an airport has many flights
		- these flights are either leaving or arriving
	- the unique combination is origin * destination * date * time * airline
	- airline has many flights
	- flight has one plane
	- plane has a certain number of seats


May be going overboard here. Reiterating the design requirements:

"A typical airline booking flow:

Enter desired dates / airports and click "Search"
Choose from among a list of eligible flights
Enter passenger information for all passengers
Enter billing information
"

class Airport
	
	name:string, presence: true
	wac:string, presence: true, min/max: 3 char #( stands for world airport code)
	city:string
	state:string

	has_many :departures, class_name :flight
	has_many :arrivals, class_name :flight

class Flight
	
	departure date:date, presence: true
	departure time:time, presence: true
	arrival date:date, presence: true
	arrival time:time, presence: true
	origin (airport_id):integer, presence: true
	destination (airport_id):integer, presence: true

	has_many :passengers, through :flight_passenger
	has_one :origin, class_name: "Airport"
	has_one :destination, class_name: "Airport"

class Passenger
	
	first name:string, presence: true
	last name:string, presence: true
	email:email, presence: true
	birthdate: date, presence: true
	phone:integer (phone field?), presence: true

	has_many :flights, through :flight_passenger
	has_many :billings

class FlightPassenger
	(through table)

	belongs_to :flight
	belongs_to :passenger

class Billing

	(all fields required)
	name:string, presence: true
	card type:string, presence: true, (one of: Visa, Mastercard, Amex, Discover)
	card number:integer, presence: true, unique: true
	card secret code:integer, presence: true, length (min:3, max:4)
	address
		street number:integer
		street name:string
		city:string
		state:string
		zip:integer

	belongs_to :passenger


----

Struggling with nested forms
The problem is that the way I have currently modeled the relationships,

a passenger has multiple bookings
and a flight has multiple passengers through bookings,
but a booking is a 1:1 table

The view that we are being told to use is supposed to create a booking for up to 4 people at a time
This implies a 1-to-many relationship between bookings and passengers

so the new data structure to accomodate this would have to be...
1 booking, 1 flight, 1-4 passengers?
that seems dumb


lets just confirm that the sample answers required the dreaded data structure before continuing down the path of migrating the structure

2 out of 5 do it without the 'ticket' concept, going to see what they did
even these ones that do it without a ticket concept relate the booking model to passengers with a has_many or a has_and_belongs_to_many relationship

looks like I've gotta change my models









